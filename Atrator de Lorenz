#BIBLIOTECAS
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import odeint

# DEFININDO O ESTADO DO SISTEMA INICIAL (x, y, z)

estado_inicial = [0.1, 0.0, 0.0]

#DEFINE OS PARAMETROS

sigma = 10
rho = 28
betha = 8 / 3
t0 = 0
tf = 100
pontos = np.linspace(t0, tf, tf*100)

def lorenz(estado_atual, t, sigma, rho, betha):
    x, y, z = estado_atual

    xdot = sigma * (y - x)
    ydot = x * (rho - z) - y
    zdot = x * y - betha * z

    return [xdot, ydot, zdot]


#Resolvendo a EDO pela função odeint() e extraindo os valores de x, y ,z

res = odeint(lorenz, estado_inicial,pontos, args = (sigma, rho, betha))

x = res[:,0]
y = res[:,1]
z = res[:,2]

# Função que atualiza os gráficos a cada frame da animação
def update_plot(i):
    rho = i + 1  # Varia o valor de rho de 1 a 28
    res = odeint(lorenz, estado_inicial, pontos, args=(sigma, rho, betha))
    x = res[:, 0]
    y = res[:, 1]
    z = res[:, 2]

    # Atualiza o gráfico do plano xy
    ax_xy.clear()
    ax_xy.plot(x, y, linewidth=0.5, color = 'g')
    ax_xy.set_xlim(-20, 20)
    ax_xy.set_ylim(-30, 30)
    ax_xy.set_title('Plano XY')

    # Atualiza o gráfico do plano xz
    ax_xz.clear()
    ax_xz.plot(x, z, linewidth=0.5, color='c')
    ax_xz.set_xlim(-20, 20)
    ax_xz.set_ylim(0, 50)
    ax_xz.set_title('Plano XZ')

    # Atualiza o gráfico do plano yz
    ax_yz.clear()
    ax_yz.plot(y, z, linewidth=0.5, color='firebrick')
    ax_yz.set_xlim(-30, 30)
    ax_yz.set_ylim(0, 50)
    ax_yz.set_title('Plano YZ')

    return ax_xy, ax_xz, ax_yz

# Configuração inicial dos subplots
fig, (ax_xy, ax_xz, ax_yz) = plt.subplots(1, 3, figsize=(15, 5))

# Função de animação
ani = animation.FuncAnimation(fig, update_plot, frames=28, interval=200, blit=True)

# Exibe a animação
plt.show()

def update_plot2(i):
    rho = i + 1  # Varia o valor de rho de 1 a 28
    res = odeint(lorenz, estado_inicial, pontos, args=(sigma, rho, betha))
    x = res[:, 0]
    y = res[:, 1]
    z = res[:, 2]

    # Limpa o gráfico anterior e plota os pontos atualizados
    ax.clear()
    ax.set_xlim(-20, 20)
    ax.set_ylim(-30, 30)
    ax.set_zlim(0, 50)
    ax.set_title('Sistema de Lorenz 3D')
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.plot(x, y, z, 'b-')

    return ax,

# Configuração inicial do gráfico 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Função de animação
ani2 = animation.FuncAnimation(fig, update_plot2, frames=28, interval=200, blit=True)

# Exibe a animação
plt.show()

#Gráfico tridimencional

fig = plt.figure(figsize=(12, 9))
ax = fig.add_subplot(projection = '3d')

ax.xaxis.set_pane_color((1, 1, 1, 1))
ax.yaxis.set_pane_color((1, 1, 1, 1))
ax.zaxis.set_pane_color((1, 1, 1, 1))
ax.plot(x, y, z, color = 'g', alpha = 0.7, linewidth = 0.6)
plt.show()


# GRAFICO BIDIMENSIONAL DO ESPACO DE FASE TRIDIMENSIONAL

fig, ax = plt.subplots(1, 3, sharex=False, sharey=False, figsize=(17, 6))
ax[0].plot(x, y, color = 'g', alpha=0.7, linewidth=0.8)
ax[0].set_title('Plano de fase x-y')
ax[1].plot(x, z, color='c', alpha=0.7, linewidth=0.8)
ax[1].set_title('Plano de fase x-z ')
ax[2].plot(y, z, color='firebrick', alpha=0.7, linewidth=0.8)
ax[2].set_title('Plano de fase y-z')

plt.show()
