#BIBLIOTECAS
import numpy as np, matplotlib.pyplot as plt, matplotlib.animation as animation
from scipy.integrate import odeint

# DEFININDO O ESTADO DO SISTEMA INICIAL (x, y, z)

estado_inicial = [0.1, 0.0, 0.0]

#DEFINE OS PARAMETROS

sigma = 10
rho = 10 #int(input())
betha = 8 / 3
t0 = 0
tf = 100
pontos = np.linspace(t0, tf, tf*100)

def lorenz(estado_atual, t, sigma, rho, betha):
    x, y, z = estado_atual

    xdot = sigma * (y - x)
    ydot = x * (rho - z) - y
    zdot = x * y - betha * z

    return [xdot, ydot, zdot]



#Resolvendo a EDO pela função odeint() e extraindo os valores de x, y ,z

res = odeint(lorenz, estado_inicial,pontos, args = (sigma, rho, betha))

x = res[:,0]
y = res[:,1]
z = res[:,2]

'''

#Gráfico tridimencional

fig = plt.figure(figsize=(12, 9))
ax = fig.add_subplot(projection = '3d')

ax.xaxis.set_pane_color((1, 1, 1, 1))
ax.yaxis.set_pane_color((1, 1, 1, 1))
ax.zaxis.set_pane_color((1, 1, 1, 1))
ax.plot(x, y, z, color = 'g', alpha = 0.7, linewidth = 0.6)
plt.show()


# GRAFICO BIDIMENSIONAL DO ESPACO DE FASE TRIDIMENSIONAL

fig, ax = plt.subplots(1, 3, sharex=False, sharey=False, figsize=(17, 6))
ax[0].plot(x, y, color = 'g', alpha=0.7, linewidth=0.8)
ax[0].set_title('Plano de fase x-y')
ax[1].plot(x, z, color='c', alpha=0.7, linewidth=0.8)
ax[1].set_title('Plano de fase x-z ')
ax[2].plot(y, z, color='firebrick', alpha=0.7, linewidth=0.8)
ax[2].set_title('Plano de fase y-z')

plt.show()
#plt.savefig('atrator_2d.jpg')
'''
fig = plt.figure()
axis = plt.axes(xlim=(-50, 50), ylim=(-50, 50))

line, = axis.plot([], [], lw=2)


# what will our line dataset
# contain?
def init():
    line.set_data([], [])
    return line,


# initializing empty values
# for x and y co-ordinates
xdata, ydata = [], []


# animation function
def animate(i):
    # rho is a parameter which varies
    # with the frame number
    rho = 1 * i

    # xdot, ydot values to be plotted
    xdot = res[:, 0]
    ydot = res[:, 1]

    # appending values to the previously
    # empty x and y data holders
    xdata.append(xdot)
    ydata.append(ydot)
    line.set_data(xdata, ydata)

    return line


# calling the animation function
anim = animation.FuncAnimation(fig, animate, init_func=init, frames=500, interval=20, blit=True)

# saves the animation in our desktop
anim.save('atratorlorenz.mp4', fps=30)
